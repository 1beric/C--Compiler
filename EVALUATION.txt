
-- COST OF OPTIMIZATIONS --
	The peephole optimizations simply loop over the instructions for each
	optimization. We can call this O(N) for N instructions. The creation
	of the CFG then takes looping over all of the instructions twice, and
	over the basic blocks once. Although we understand that there will
	always be more instructions than basic blocks, we include it in the
	overhead nonetheless. With M basic blocks, this optimization requires
	O(2N+M). Dead-code elimination is a bit more complicated. The compiler
	must continuously (and iteratively) compute the def, use, in, and out
	sets for variables that are considered live. As the deadcode algorithmic
	marks instructions dead, some variables may not be live, so the sets
	must be recomputed. The calculation of the sets must loop over all of the
	instructions each time for the def and use sets. Then, at worst case,
	the algorithm will mark the last element dead in every pass, requiring
	N iterations over the N instructions. Thus the liveness algorithm itself
	takes O(N^2+N). The deadcode analysis may also take N iterations of the
	liveness algorithm and iterating over the N instructions to mark some dead.
	The speed overhead for the deadcode elimination is then O(N*(N^2+N+N)), 
	which can be simplified to O(N^3+2N^2), which is pretty intensive if 
	the instructions line up for the worst cases, which are when every instruction
	is marked dead, but in reverse order. At worst-case, the speed overhead of
	running -Olocal with -Oglobal is O(N^3+5N+M).

-- 1 -- TEST CODE -- 1 --
	/* nested array assignents: local arrays */

	extern void println (int n);

	void main(void)
	{
	int x[10];

	int u;

	x[0] = 1;
	x[1] = 2;
	x[2] = 3;
	x[3] = 4;
	x[4] = 5;
	x[5] = 6;
	x[6] = 7;
	x[7] = 8;
	x[8] = 9;
	x[9] = 10;

	u = x[x[x[x[x[x[x[x[x[x[0]]]]]]]]]];
	println(u);
	}
-- 1 -- RESULTS -- 1 --
	no optimizations:
		Stats -- #instructions : 333
        #reads : 105  #writes 104  #branches 5  #other 119
	-Olocal
		Stats -- #instructions : 321
        #reads : 74  #writes 104  #branches 5  #other 138
        from original --- #reads : -31  #writes 0  #branches 0  #other +19
		These optimizations come mostly from intra-block copy propagation, but also
		the algorithmic simplification the compiler performs from the peephole optimizations
	-Oglobal
		Stats -- #instructions : 333
        #reads : 105  #writes 104  #branches 5  #other 119
        from original --- #reads : 0  #writes 0  #branches 0  #other 0
		There are no benefits to running -Oglobal by itself in this program, because none 
		of the code becomes dead.
	-Olocal -Oglobal
		Stats -- #instructions : 209
        #reads : 54  #writes 53  #branches 5  #other 97
        from original --- #reads : -51  #writes -51  #branches 0  #other -22
		The benefits from running the combination of opimizations are reaped by performing
		intra-block copy propagation. Then, any dead code is eliminated, removing the 
		MOVE instructions to the temp varibales created when using an integer constant.
		Finally, as the integer assignments are copied to further uses, any arithmetic 
		between two integers is computed to simplify instructions into MOVEs instead of 
		ADDs, SUBs, MULs, and DIVs.

-- 2 -- TEST CODE -- 2 --
	/* assignments to several local scalar variables */

	extern void println (int n);

	void main(void)
	{
	int x, y, z, u, v;

	x = 111;
	y = 222;
	z = 333;
	u = 444;
	v = 555;
	println(x);
	println(y);
	println(z);
	println(u);
	println(v);
	}
-- 2 -- RESULTS -- 2 --
	no optimizations:
		Stats -- #instructions : 99
        #reads : 18  #writes 17  #branches 13  #other 51
	-Olocal
		Stats -- #instructions : 99
        #reads : 8  #writes 17  #branches 13  #other 61
        from original --- #reads : -10  #writes 0  #branches 0  #other +10
		The optimizations that occur here are mainly pulling
		out reads and making them into moves from an integer constant
	-Oglobal
		Stats -- #instructions : 99
        #reads : 18  #writes 17  #branches 13  #other 51
        from original --- #reads : 0  #writes 0  #branches 0  #other 0
		There are no instructions that are dead without any other optimizations
	-Olocal -Oglobal
		Stats -- #instructions : 79
        #reads : 8  #writes 7  #branches 13  #other 51
        from original --- #reads : -10  #writes -10  #branches 0  #other 0
		With copy propagation, the integer constants are moved to the println
		PARAM instructions. Then deadcode elimination analysis will remove the
		MOVEs to the variables, because they do not get used anymore.


-- 3 -- TEST CODE -- 3 --
	/*
	* File: globalopt-05
	* Tests: dead code elimination involving multiple IF statements
	*
	* All the assignments to y are dead
	*
	*/

	extern void println(int x);

	void main(void) {
		int x, y;

		x = 12;
		y = 21;
		
		if (x > 0) {y = x + 2*y; x = x + 1; } else { y = 3*x - 2; }
		if (x > 0) {y = x + 2*y; x = x + 1; } else { y = 3*x - 2; }

		println(x);
	}
-- 3 -- RESULTS -- 3 --
	no optimizations:
		Stats -- #instructions : 93
        #reads : 27  #writes 23  #branches 9  #other 34
	-Olocal
		Stats -- #instructions : 93
        #reads : 18  #writes 23  #branches 9  #other 43
        from original --- #reads : -9  #writes 0  #branches 0  #other +9
		Copy propagation simply moves loads into MOVE instructions.
	-Oglobal
		Stats -- #instructions : 65
        #reads : 16  #writes 13  #branches 9  #other 27
        from original --- #reads : -11  #writes -10  #branches 0  #other -7
		The deadcode analysis removes code that is written but doesn't actualy get used!
		(could be attributed to the programmer)
	-Olocal -Oglobal
		Stats -- #instructions : 55
        #reads : 10  #writes 8  #branches 9  #other 28
        from original --- #reads : -17  #writes -15  #branches 0  #other -6
		Combining both, the program gets a large benefit in all cases (except branches)
	
-- 4 -- TEST CODE -- 4 --
	/* more complex conditionals */

	int a, b, c, d, e, f, g, h, i, j;
	int res;

	extern void println (int n);

	void main(void)
	{
	a = 1; b = 2; c = 3; d = 4; e = 5;
	f = 6; g = 7; h = 8; i = 9; j = 10;

	if (a <= b && b <= c && c <= d && d <= e && 
		!!!(e > f || f > g || g > h || h > i || i > j))
		res = 1111;
	else
		res = 2222;
	println(res);
	}
-- 4 -- RESULTS -- 4 --
	no optimizations:
		Stats -- #instructions : 148
        #reads : 34  #writes 25  #branches 20  #other 69
	-Olocal
		Stats -- #instructions : 146
        #reads : 21  #writes 25  #branches 20  #other 80
        from original --- #reads : -13  #writes 0  #branches 0  #other +11
	-Oglobal
		Stats -- #instructions : 148
        #reads : 34  #writes 25  #branches 20  #other 69
        from original --- #reads : 0  #writes 0  #branches 0  #other 0
		There is no deadcode that the programmer wrote.
	-Olocal -Oglobal
		Stats -- #instructions : 124
        #reads : 21  #writes 14  #branches 20  #other 69
        from original --- #reads : -13  #writes -11  #branches 0  #other 0
		Copy propagation creates dead code, which the global optimization
		removes.
-- 5 -- TEST CODE -- 5 --
	/* mixed while loops and conditionals */

	extern void println (int n);

	void main(void)
	{
	int i, j, k, a, b;
	int res;

	i = 0;
	res = 123;
	while (i < 5) {
		j = 0;
		while (j < 5) {
		k = (i+j)/2;
		if (k > i) {
		a = 0;
		while (a < 5) {
		b = (a+k)/2;
		if (b > j) 
			res = res + b;
		else
			res = res + k;
		a = a+1;
		}
		}
		j = j+1;
		}
		i = i+1;
	}
	println(res);
	}
-- 5 -- RESULTS -- 5 --
	no optimizations:
		Stats -- #instructions : 2292
        #reads : 817  #writes 561  #branches 314  #other 600
	-Olocal
		Stats -- #instructions : 2231
         #reads : 617  #writes 561  #branches 253  #other 800
        from original --- #reads : -200  #writes 0  #branches -71  #other +200
	-Oglobal
		Stats -- #instructions : 2292
         #reads : 817  #writes 561  #branches 314  #other 600
        from original --- #reads : 0  #writes 0  #branches 0  #other 0
		There is no deadcode that the programmer wrote.
	-Olocal -Oglobal
		Stats -- #instructions : 1831
         #reads : 617  #writes 361  #branches 253  #other 600
        from original --- #reads : -200  #writes -200  #branches -71  #other 0
		Copy propagation creates dead code, which the global optimization
		removes.


